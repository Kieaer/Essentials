plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "com.github.node-gradle.node" version "5.0.0"
    id 'org.jetbrains.kotlin.jvm' version '1.9.20-RC2'

}

repositories{
    mavenLocal()
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url 'https://www.jitpack.io' }
}

ext{
    mindustryVersion = 'v146'
    ktor = '2.3.10'
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.mindustryjitpack:core:$mindustryVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.2"
    compileOnly project(":Essential")

    // Web server
    implementation "io.javalin:javalin:6.1.3"

    implementation "io.ktor:ktor-server-core-jvm:$ktor"
    implementation "io.ktor:ktor-server-netty-jvm:$ktor"
    implementation "io.ktor:ktor-server-content-negotiation:$ktor"
    implementation "io.ktor:ktor-serialization-jackson:$ktor"
    implementation "io.ktor:ktor-server-rate-limit:$ktor"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

jar{
    if (!file("./src/main/resources/www").exists()) {
        dependsOn("web")
    }

    from{
        configurations.runtimeClasspath.collect{it.isDirectory() ? it : zipTree(it)}
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from(rootDir){
        include "plugin.json"
    }

    dependsOn shadowJar
}

tasks.register('nodeBuild', NpmTask) {
    description = "node.js 빌드"
    group = JavaBasePlugin.BUILD_DEPENDENTS_TASK_NAME
    workingDir = file("src/www")
    args = ['run', 'build']
}

tasks.register('nodeInstall', NpmTask) {
    description = "node.js 복사"
    group = JavaBasePlugin.BUILD_DEPENDENTS_TASK_NAME
    args = ['install']
}

tasks.register('web') {
    description = "웹 파일 빌드"
    group = JavaBasePlugin.BUILD_TASK_NAME
    def build = tasks['nodeBuild']
    def install = tasks['nodeInstall']
    if (!file('./src/www/node_modules').exists()) {
        dependsOn(install)
        dependsOn(build)
        build.mustRunAfter(install)
    } else {
        dependsOn(build)
    }

    project.delete(
            files('./src/main/resources/www')
    )
    copy {
        from('./src/www/dist')
        into('./src/main/resources/www')
    }
}



shadowJar {
    minimize()
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc') details.useVersion "$mindustryVersion"
    }
}
kotlin {
    jvmToolchain(17)
}